@page "/cadastro-abastecimento"
@using MeuProjetoBlazorServer.Data
@using MeuProjetoBlazorServer.Services
@using System.Net.Http.Json
@using Microsoft.EntityFrameworkCore
@inject IFuelRecordService FuelRecordService
@inject IVehicleService VehicleService
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ApplicationDbContext DbContext

<PageTitle>Cadastro de Abastecimento</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h3 class="mb-0">
                        <i class="fas fa-gas-pump me-2"></i>
                        Cadastro de Abastecimento
                    </h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@fuelRecord" OnValidSubmit="SalvarAbastecimento">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="vehicleId" class="form-label">Veículo *</label>
                                <InputSelect id="vehicleId" class="@GetInputClass(erroVehicleId)" 
                                           @bind-Value="fuelRecord.VehicleId">
                                    <option value="0">Selecione um veículo</option>
                                    @if (vehicles.Count > 0)
                                    {
                                        @foreach (var vehicle in vehicles)
                                        {
                                            <option value="@vehicle.Id">@vehicle.Name (@vehicle.Year)</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="0" disabled>Nenhum veículo disponível</option>
                                    }
                                </InputSelect>
                                @if (erroVehicleId)
                                {
                                    <div class="invalid-feedback">
                                        Veículo é obrigatório
                                    </div>
                                }
                                <small class="form-text text-muted">
                                    @if (isLoadingVehicles)
                                    {
                                        <span class="text-warning">
                                            <i class="fas fa-spinner fa-spin me-1"></i>
                                            Carregando veículos...
                                        </span>
                                    }
                                    else if (vehicles.Count == 0)
                                    {
                                        <span class="text-danger">
                                            <i class="fas fa-exclamation-triangle me-1"></i>
                                            Nenhum veículo encontrado
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-success">
                                            <i class="fas fa-check me-1"></i>
                                            @vehicles.Count veículo(s) disponível(is)
                                        </span>
                                    }
                                </small>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="fuelType" class="form-label">Tipo de Combustível *</label>
                                <InputSelect id="fuelType" class="@GetInputClass(erroFuelType)" 
                                           @bind-Value="fuelRecord.FuelType">
                                    <option value="">Selecione o tipo</option>
                                    <option value="Gasolina">Gasolina</option>
                                    <option value="Álcool">Álcool</option>
                                    <option value="Diesel">Diesel</option>
                                    <option value="Flex">Flex</option>
                                </InputSelect>
                                @if (erroFuelType)
                                {
                                    <div class="invalid-feedback">
                                        Tipo de combustível é obrigatório
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="odometer" class="form-label">Quilometragem (km) *</label>
                                <InputNumber id="odometer" class="@GetInputClass(erroOdometer)" 
                                           @bind-Value="fuelRecord.Odometer" min="0" step="0.1" />
                                @if (erroOdometer)
                                {
                                    <div class="invalid-feedback">
                                        Quilometragem é obrigatória e deve ser maior ou igual a 0
                                    </div>
                                }
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="fuelAmount" class="form-label">Quantidade (L) *</label>
                                <InputNumber id="fuelAmount" class="@GetInputClass(erroFuelAmount)" 
                                           @bind-Value="fuelRecord.FuelAmount" min="0.1" step="0.1" />
                                @if (erroFuelAmount)
                                {
                                    <div class="invalid-feedback">
                                        Quantidade é obrigatória e deve ser maior que 0
                                    </div>
                                }
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="fuelPricePerUnit" class="form-label">Preço por Litro (R$) *</label>
                                <InputNumber id="fuelPricePerUnit" class="@GetInputClass(erroFuelPricePerUnit)" 
                                           @bind-Value="fuelRecord.FuelPricePerUnit" min="0.01" step="0.01" />
                                @if (erroFuelPricePerUnit)
                                {
                                    <div class="invalid-feedback">
                                        Preço por litro é obrigatório e deve ser maior que 0
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="totalCost" class="form-label">Custo Total (R$) *</label>
                                <InputNumber id="totalCost" class="@GetInputClass(erroTotalCost)" 
                                           @bind-Value="fuelRecord.TotalCost" min="0.01" step="0.01" />
                                @if (erroTotalCost)
                                {
                                    <div class="invalid-feedback">
                                        Custo total é obrigatório e deve ser maior que 0
                                    </div>
                                }
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="fullTank" class="form-label">Tanque Cheio</label>
                                <div class="form-check mt-2">
                                    <InputCheckbox id="fullTank" class="form-check-input" 
                                                 @bind-Value="fuelRecord.FullTank" />
                                    <label class="form-check-label" for="fullTank">
                                        Marque se encheu o tanque completamente
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="createdAt" class="form-label">Data do Abastecimento</label>
                                <InputDate id="createdAt" class="form-control" 
                                         @bind-Value="fuelRecord.CreatedAt" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="notes" class="form-label">Observações</label>
                                <InputTextArea id="notes" class="form-control" rows="3" 
                                             @bind-Value="fuelRecord.Notes" 
                                             placeholder="Ex: Abastecimento no posto X, qualidade do combustível, etc." />
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="LimparFormulario">
                                <i class="fas fa-eraser me-2"></i>
                                Limpar
                            </button>
                            <button type="button" class="btn btn-info me-2" @onclick="TestarCarregamentoVeiculos">
                                <i class="fas fa-bug me-2"></i>
                                Testar Veículos
                            </button>
                            <button type="submit" class="btn btn-success" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Salvando...</span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                    <span>Salvar Abastecimento</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>

            @if (fuelRecords.Count > 0)
            {
                <div class="card mt-4">
                    <div class="card-header bg-info text-white">
                        <h4 class="mb-0">
                            <i class="fas fa-list me-2"></i>
                            Abastecimentos Registrados
                        </h4>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Veículo</th>
                                        <th>Data</th>
                                        <th>Tipo</th>
                                        <th>Quantidade</th>
                                        <th>Preço/L</th>
                                        <th>Total</th>
                                        <th>Quilometragem</th>
                                        <th>Tanque Cheio</th>
                                        <th>Ações</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var record in fuelRecords)
                                    {
                                        <tr>
                                            <td>@record.Vehicle?.Name</td>
                                            <td>@record.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                            <td>@record.FuelType</td>
                                            <td>@record.FuelAmount L</td>
                                            <td>R$ @record.FuelPricePerUnit.ToString("F2")</td>
                                            <td>R$ @record.TotalCost.ToString("F2")</td>
                                            <td>@record.Odometer km</td>
                                            <td>
                                                @if (record.FullTank)
                                                {
                                                    <span class="badge bg-success">Sim</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Não</span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditarAbastecimento(record)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger" @onclick="() => ExcluirAbastecimento(record.Id)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private FuelRecord fuelRecord = new FuelRecord { IsDeleted = false, CreatedAt = DateTime.Now };
    private List<FuelRecord> fuelRecords = new List<FuelRecord>();
    private List<Vehicle> vehicles = new List<Vehicle>();
    
    // Flag para controlar o estado de carregamento
    private bool isLoadingVehicles = false;
    private bool erroVehicleId = false;
    private bool erroFuelType = false;
    private bool erroOdometer = false;
    private bool erroFuelAmount = false;
    private bool erroFuelPricePerUnit = false;
    private bool erroTotalCost = false;
    private bool editando = false;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await CarregarDados();
    }

    private async Task CarregarDados()
    {
        try
        {
            Console.WriteLine("Iniciando carregamento de dados...");
            
            // Carrega veículos primeiro para debug
            Console.WriteLine("Carregando veículos...");
            
            // Tenta carregar veículos de forma mais direta
            try
            {
                vehicles = await VehicleService.GetAllVehiclesAsync();
                Console.WriteLine($"Veículos carregados via serviço direto: {vehicles.Count}");
                
                if (vehicles.Count > 0)
                {
                    foreach (var v in vehicles)
                    {
                        Console.WriteLine($"   - ID: {v.Id}, Nome: {v.Name}, Ano: {v.Year}");
                    }
                }
                else
                {
                    Console.WriteLine("AVISO: Lista de veículos está vazia!");
                }
            }
            catch (Exception vehicleEx)
            {
                Console.WriteLine($"ERRO ao carregar veículos: {vehicleEx.Message}");
                vehicles = new List<Vehicle>();
            }
            
            // Carrega abastecimentos
            Console.WriteLine("Carregando abastecimentos...");
            fuelRecords = await FuelRecordService.GetAllFuelRecordsAsync();
            Console.WriteLine($"Abastecimentos carregados: {fuelRecords.Count}");
            
            // Força a atualização da UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
        }
    }

    private async Task<List<Vehicle>> CarregarVeiculosDaAPI()
    {
        try
        {
            isLoadingVehicles = true;
            Console.WriteLine("=== INÍCIO: CarregarVeiculosDaAPI ===");
            
            // Verifica se o HttpClient está disponível
            if (Http == null)
            {
                Console.WriteLine("ERRO: HttpClient é null!");
                Console.WriteLine("Tentando fallback para serviço direto...");
                var vehiclesFromService = await VehicleService.GetAllVehiclesAsync();
                Console.WriteLine($"Veículos do serviço direto: {vehiclesFromService.Count}");
                return vehiclesFromService;
            }
            
            Console.WriteLine("HttpClient está disponível, tentando API...");
            
            // Chama a API VehiclesController
            var url = "api/vehicles";
            Console.WriteLine($"URL da API: {url}");
            
            // Tenta diferentes variações da URL
            var response = await Http.GetAsync(url);
            Console.WriteLine($"Primeira tentativa - Status: {response.StatusCode}");
            
            if (!response.IsSuccessStatusCode)
            {
                // Tenta com barra no início
                response = await Http.GetAsync("/" + url);
                Console.WriteLine($"Segunda tentativa com barra - Status: {response.StatusCode}");
            }
            
            Console.WriteLine($"Status final da resposta: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Conteúdo da resposta: {content}");
                
                var vehicles = await response.Content.ReadFromJsonAsync<List<Vehicle>>();
                Console.WriteLine($"Veículos deserializados da API: {vehicles?.Count ?? 0}");
                
                if (vehicles != null && vehicles.Count > 0)
                {
                    Console.WriteLine("API funcionou! Retornando veículos da API.");
                    return vehicles;
                }
                else
                {
                    Console.WriteLine("API retornou lista vazia, tentando serviço direto...");
                    var vehiclesFromService = await VehicleService.GetAllVehiclesAsync();
                    Console.WriteLine($"Veículos do serviço direto: {vehiclesFromService.Count}");
                    return vehiclesFromService;
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erro ao carregar veículos da API: {response.StatusCode} - {errorContent}");
                Console.WriteLine("Usando fallback para serviço direto...");
                var vehiclesFromService = await VehicleService.GetAllVehiclesAsync();
                Console.WriteLine($"Veículos do serviço direto: {vehiclesFromService.Count}");
                return vehiclesFromService;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exceção ao carregar veículos da API: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            Console.WriteLine("Usando fallback para serviço direto...");
            try
            {
                var vehiclesFromService = await VehicleService.GetAllVehiclesAsync();
                Console.WriteLine($"Veículos do serviço direto: {vehiclesFromService.Count}");
                return vehiclesFromService;
            }
            catch (Exception serviceEx)
            {
                Console.WriteLine($"ERRO CRÍTICO no serviço direto: {serviceEx.Message}");
                return new List<Vehicle>();
            }
        }
        finally
        {
            isLoadingVehicles = false;
            Console.WriteLine("=== FIM: CarregarVeiculosDaAPI ===");
        }
    }

    private string GetInputClass(bool hasError)
    {
        return hasError ? "form-control is-invalid" : "form-control";
    }

    private async Task SalvarAbastecimento()
    {
        // Validação
        erroVehicleId = fuelRecord.VehicleId <= 0;
        erroFuelType = string.IsNullOrWhiteSpace(fuelRecord.FuelType);
        erroOdometer = fuelRecord.Odometer < 0;
        erroFuelAmount = fuelRecord.FuelAmount <= 0;
        erroFuelPricePerUnit = fuelRecord.FuelPricePerUnit <= 0;
        erroTotalCost = fuelRecord.TotalCost <= 0;

        if (erroVehicleId || erroFuelType || erroOdometer || erroFuelAmount || erroFuelPricePerUnit || erroTotalCost)
            return;

        isLoading = true;

        try
        {
            if (editando)
            {
                await FuelRecordService.UpdateFuelRecordAsync(fuelRecord);
                editando = false;
            }
            else
            {
                await FuelRecordService.CreateFuelRecordAsync(fuelRecord);
            }

            await CarregarDados();
            LimparFormulario();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao salvar abastecimento: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditarAbastecimento(FuelRecord recordParaEditar)
    {
        fuelRecord = new FuelRecord
        {
            Id = recordParaEditar.Id,
            VehicleId = recordParaEditar.VehicleId,
            FuelType = recordParaEditar.FuelType,
            Odometer = recordParaEditar.Odometer,
            FuelAmount = recordParaEditar.FuelAmount,
            FuelPricePerUnit = recordParaEditar.FuelPricePerUnit,
            TotalCost = recordParaEditar.TotalCost,
            FullTank = recordParaEditar.FullTank,
            Notes = recordParaEditar.Notes,
            CreatedAt = recordParaEditar.CreatedAt,
            IsDeleted = false
        };
        editando = true;
    }

    private async Task ExcluirAbastecimento(int id)
    {
        try
        {
            await FuelRecordService.DeleteFuelRecordAsync(id);
            await CarregarDados();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao excluir abastecimento: {ex.Message}");
        }
    }

    private async Task TestarCarregamentoVeiculos()
    {
        Console.WriteLine("=== TESTE MANUAL DE VEÍCULOS ===");
        
        try
        {
            // Testa conexão com banco
            Console.WriteLine("0. Testando conexão com banco...");
            try
            {
                var canConnect = await DbContext.Database.CanConnectAsync();
                Console.WriteLine($"   Banco acessível: {canConnect}");
                
                if (canConnect)
                {
                    var vehicleCount = await DbContext.Vehicles.CountAsync();
                    Console.WriteLine($"   Total de veículos na tabela: {vehicleCount}");
                    
                    var nonDeletedCount = await DbContext.Vehicles.Where(v => !v.IsDeleted).CountAsync();
                    Console.WriteLine($"   Veículos não deletados: {nonDeletedCount}");
                }
            }
            catch (Exception dbEx)
            {
                Console.WriteLine($"   ERRO no banco: {dbEx.Message}");
            }
            
            // Testa o serviço direto primeiro
            Console.WriteLine("1. Testando VehicleService diretamente...");
            var vehiclesFromService = await VehicleService.GetAllVehiclesAsync();
            Console.WriteLine($"   Resultado: {vehiclesFromService.Count} veículos");
            
            if (vehiclesFromService.Count > 0)
            {
                foreach (var v in vehiclesFromService)
                {
                    Console.WriteLine($"   - ID: {v.Id}, Nome: {v.Name}, Ano: {v.Year}");
                }
            }
            
            // Testa a API
            Console.WriteLine("2. Testando API...");
            if (Http != null)
            {
                var response = await Http.GetAsync("api/vehicles");
                Console.WriteLine($"   Status da API: {response.StatusCode}");
                
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"   Conteúdo da API: {content}");
                }
            }
            else
            {
                Console.WriteLine("   HttpClient é null!");
            }
            
            // Atualiza a lista local
            vehicles = vehiclesFromService;
            StateHasChanged();
            
            Console.WriteLine("=== FIM DO TESTE ===");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERRO NO TESTE: {ex.Message}");
        }
    }

    private void LimparFormulario()
    {
        fuelRecord = new FuelRecord 
        { 
            IsDeleted = false, 
            CreatedAt = DateTime.Now 
        };
        erroVehicleId = false;
        erroFuelType = false;
        erroOdometer = false;
        erroFuelAmount = false;
        erroFuelPricePerUnit = false;
        erroTotalCost = false;
        editando = false;
    }
}
